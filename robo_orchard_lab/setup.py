# Project RoboOrchard
#
# Copyright (c) 2024-2025 Horizon Robotics. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.

import os
import subprocess
import warnings

from setuptools import setup

PROJECT_NAME = "robo_orchard_lab"
PYTHON_BASE_DIR = os.path.abspath(os.path.dirname(__file__))

LICENSE_HEADER = """# Project RoboOrchard
#
# Copyright (c) 2024-2025 Horizon Robotics. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
"""

HORIZON_CI = os.environ.get("HORIZON_CI", default="0") == "1"


class VersionPostfixNotExist(Exception):  # noqa: N818
    pass


def get_version() -> str:
    with open(os.path.join(PYTHON_BASE_DIR, "VERSION"), "r") as fp:
        base_version = fp.read().strip()

    def get_full_version(
        version_postfix_path, throw_if_not_exist: bool = True
    ) -> str:
        if os.path.exists(version_postfix_path):
            with open(version_postfix_path, "r") as fp:
                post_fix = fp.read().strip()
            return f"{base_version}{post_fix}"
        elif throw_if_not_exist:
            raise VersionPostfixNotExist(
                "VERSION_POSTFIX file not found! please call `make version` first"  # noqa: E501
            )
        else:
            warnings.warn(
                "VERSION_POSTFIX file not found! using base version only",
                UserWarning,
            )
            return base_version

    # generate git hash
    try:
        repo_git_hash = subprocess.check_output(
            "git log -1 --pretty=format:%h".split()
        ).decode()
    except subprocess.CalledProcessError:
        # if git command fails, use a placeholder
        warnings.warn(
            "Failed to get git hash, using 'unknown' as placeholder",
            UserWarning,
        )
        repo_git_hash = "unknown"

    version_postfix_path = os.path.join(PYTHON_BASE_DIR, "VERSION_POSTFIX")

    try:
        full_version = get_full_version(version_postfix_path)
    except VersionPostfixNotExist:
        # if VERSION_POSTFIX file not found, check the parent directory
        version_postfix_path = os.path.join(
            os.path.dirname(PYTHON_BASE_DIR), "VERSION_POSTFIX"
        )
        try:
            full_version = get_full_version(version_postfix_path)
        except VersionPostfixNotExist:
            # if still not found, use base version only
            warnings.warn(
                "VERSION_POSTFIX file not found in both current and parent directories! "  # noqa: E501
                "try to using base version.",
                UserWarning,
            )
            full_version = f"{base_version}.dev"

    with open(
        os.path.join(PYTHON_BASE_DIR, PROJECT_NAME, "version.py"), "w"
    ) as fp:  # noqa: E501
        fp.write(LICENSE_HEADER + "\n")
        fp.write(
            '"""This file is auto-generated by setup.py, do not edit it!"""\n\n'  # noqa: E501
        )
        fp.write(f'__version__ = "{base_version}"\n')
        fp.write(f'__full_version__ = "{full_version}"\n')
        fp.write(f'__git_hash__ = "{repo_git_hash}"\n')

    return full_version


def wrap_github_dependency(
    dependencies: list[str] | dict[str, list[str]],
):
    if not HORIZON_CI:
        return dependencies

    replace_pair = (
        "github.com/HorizonRobotics/",
        "jh-gitlab.hobot.cc/dep/robot-lab/open-source/",
    )

    if isinstance(dependencies, list):
        return [dep.replace(*replace_pair) for dep in dependencies]
    elif isinstance(dependencies, dict):
        for k, v in dependencies.items():
            dependencies[k] = [dep.replace(*replace_pair) for dep in v]
        return dependencies
    else:
        raise TypeError(
            "dependencies should be a list or a dict, "
            f"but got {type(dependencies)}"
        )


if __name__ == "__main__":
    install_requires = [
        "pydantic",
        "torch==2.4.1",
        "torchvision==0.19.0",
        "numpy<2",  # dependencies may not be compatible with numpy 2.x
        "accelerate",
        "tqdm",
        "deprecated",
        "timeout-decorator",
        "requests",
        "huggingface_hub==0.25.0",
        # metric
        "torchmetrics>=1.6",
        "datasets>=3.2.0",
        "sqlalchemy",
        "duckdb-engine",
        "fsspec",
        # robo orchard
        # "robo_orchard_core>=0.1.0", # This should be used in release version.
        # use git url to install the latest version.
        # This is for non-release version only.
        "robo_orchard_core",
    ]
    # optional dependencies
    extras_require = {
        "bip3d": [
            "transformers<=4.37.0",
            "terminaltables",
            "pytorch3d",
            "ninja",
        ],
        "sem": [
            "robo_orchard_lab[bip3d]",
            "diffusers",
            "lmdb",
            "pytorch-kinematics",
            "h5py",
        ],
        "mcap_datasets": [
            "mcap-protobuf-support>=0.5.3",
            "mcap-ros2-support",
            "mcap>=1.2.2",
            "foxglove-schemas-protobuf>=0.3.0",
            "opencv-python",
            "robo_orchard_schemas@git+https://github.com/HorizonRobotics/robo_orchard_schemas.git@9c8055a121c049ed94a7b48095c1bae6a0d0f60d",
        ],
        "aux_think": [
            "transformers<=4.37.2",
            "tokenizers",
            "peft<=0.15.2",
            "markdown2[all]",
            "scikit-learn>=1.2.2",
            "opencv-python",
            "uvicorn",
            "fastapi",
            "timm",
            "ninja",
            "tyro",
            "loguru",
            "hydra-core",
            "deepspeed",
        ],
        "finegrasp": [
            "scipy",
            "einops",
            "torch-geometric",
            "open3d",
        ],
        "all": [
            "robo_orchard_lab[bip3d,sem,mcap_datasets,aux_think,finegrasp]"
        ],
    }

    setup(
        version=get_version(),
        install_requires=wrap_github_dependency(install_requires),
        extras_require=wrap_github_dependency(extras_require),
    )
